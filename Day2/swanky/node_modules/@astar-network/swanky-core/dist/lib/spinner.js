"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Spinner = void 0;
const tslib_1 = require("tslib");
const ora_1 = tslib_1.__importDefault(require("ora"));
class Spinner {
    constructor(verbose = false) {
        this.ora = (0, ora_1.default)();
        this.verbose = verbose;
    }
    start(text) {
        this.ora = (0, ora_1.default)(text).start();
        return Promise.resolve();
    }
    succeed(text) {
        this.ensureSpinner();
        this.ora.succeed(text);
    }
    fail(text) {
        this.ensureSpinner();
        this.ora.fail(text);
    }
    output(text) {
        this.ora.info(text).start();
    }
    text(text) {
        this.ora.text = text;
    }
    //TODO: Take an options object as argument
    async runCommand(command, runningMessage, successMessage, failMessage, shouldExitOnError = true) {
        try {
            this.start(runningMessage);
            const res = await command();
            this.succeed(successMessage || `${runningMessage} OK`);
            return res;
        }
        catch (error) {
            this.fail(failMessage || `Error ${runningMessage}`);
            if (this.verbose)
                console.error(error);
            if (shouldExitOnError)
                process.exit(1);
        }
    }
    ensureSpinner() {
        if (!this.ora) {
            throw new Error("spinner not started");
        }
    }
}
exports.Spinner = Spinner;
