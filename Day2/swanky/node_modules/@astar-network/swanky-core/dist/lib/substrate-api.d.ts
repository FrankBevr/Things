import { ApiPromise, WsProvider } from "@polkadot/api";
import { SignerOptions } from "@polkadot/api/types";
import { Codec, ISubmittableResult } from "@polkadot/types/types";
import { TypeRegistry } from "@polkadot/types";
import { BlockHash } from "@polkadot/types/interfaces";
import { ChainAccount } from "./account";
import BN from "bn.js";
import { ChainProperty, ExtrinsicPayload } from "../types";
import { KeyringPair } from "@polkadot/keyring/types";
export declare class ChainApi {
    private _chainProperty?;
    private _registry;
    protected _provider: WsProvider;
    protected _api: ApiPromise;
    constructor(endpoint: string, silent?: boolean);
    get apiInst(): ApiPromise;
    get chainProperty(): ChainProperty;
    get typeRegistry(): TypeRegistry;
    start(): Promise<void>;
    getBlockHash(blockNumber: number): Promise<BlockHash>;
    buildTxCall(extrinsic: string, method: string, ...args: any[]): ExtrinsicPayload;
    buildStorageQuery(extrinsic: string, method: string, ...args: any[]): Promise<Codec>;
    wrapBatchAll(txs: ExtrinsicPayload[]): ExtrinsicPayload;
    wrapSudo(tx: ExtrinsicPayload): ExtrinsicPayload;
    nonce(account: ChainAccount): Promise<number | undefined>;
    getBalance(account: ChainAccount): Promise<BN>;
    signAndSend(signer: KeyringPair, tx: ExtrinsicPayload, options?: Partial<SignerOptions>, handler?: (result: ISubmittableResult) => void): Promise<() => void>;
}
